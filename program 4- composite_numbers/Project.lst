Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/04/16 23:38:54
+Composite Numbers     (Project4_Arnold.asm		     Page 1 - 1


				TITLE Composite Numbers     (Project4_Arnold.asm)

				; Author: Keisha Arnold
				; Email: arnoldke@oregonstate.edu
				; Course / Project ID: CS 271-400 / Composite Numbers       Due Date: November 6, 2016
				; Description: This program will prompt the user to enter the number of composites they would 
				;    like displayed [1, 400], validate user input, then calculate and display the number of 
				;    composites up to and including the nth composite. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
				; term range
 = 00000001			LOWER_LIMIT = 1
 = 00000190			UPPER_LIMIT = 400

 00000000			.data
				; string variables
 00000000 43 6F 6D 70 6F	intro_program  BYTE "Composite Numbers       by Keisha Arnold", 0
	   73 69 74 65 20
	   4E 75 6D 62 65
	   72 73 20 20 20
	   20 20 20 20 62
	   79 20 4B 65 69
	   73 68 61 20 41
	   72 6E 6F 6C 64
	   00
 00000029 48 6F 77 20 6D	display_intro  BYTE "How many composite numbers you would like to see? ", 0dh, 0ah
	   61 6E 79 20 63
	   6F 6D 70 6F 73
	   69 74 65 20 6E
	   75 6D 62 65 72
	   73 20 79 6F 75
	   20 77 6F 75 6C
	   64 20 6C 69 6B
	   65 20 74 6F 20
	   73 65 65 3F 20
	   0D 0A
 0000005D  49 27 6C 6C 20	               BYTE "I'll accept orders for up to 400 composites.", 0
	   61 63 63 65 70
	   74 20 6F 72 64
	   65 72 73 20 66
	   6F 72 20 75 70
	   20 74 6F 20 34
	   30 30 20 63 6F
	   6D 70 6F 73 69
	   74 65 73 2E 00
 0000008A 45 6E 74 65 72	prompt_num     BYTE "Enter the number of composites to display [1 ... 400]: ", 0
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   63 6F 6D 70 6F
	   73 69 74 65 73
	   20 74 6F 20 64
	   69 73 70 6C 61
	   79 20 5B 31 20
	   2E 2E 2E 20 34
	   30 30 5D 3A 20
	   00
 000000C2 4F 75 74 20 6F	prompt_error   BYTE "Out of range. Try again. ", 0
	   66 20 72 61 6E
	   67 65 2E 20 54
	   72 79 20 61 67
	   61 69 6E 2E 20
	   00
 000000DC 47 6F 6F 64 62	goodbye        BYTE "Goodbye! ", 0
	   79 65 21 20 00

				; integer variables
 000000E6 00000000		num_comp       DWORD      ?             ; number of composites reqested by user
 000000EA  00000258 [		listInts       DWORD      600 DUP(?)
	    00000000
	   ]
 00000A4A 00000004		checkComp      DWORD      4             ; composite numbers start at 4
				    
				; EC Options
 00000A4E 2A 2A 45 43 3A	ec_1      BYTE "**EC: Align the output columns.", 0
	   20 41 6C 69 67
	   6E 20 74 68 65
	   20 6F 75 74 70
	   75 74 20 63 6F
	   6C 75 6D 6E 73
	   2E 00
				;ec_2      BYTE "**EC: Show composites one page at a time. The user can 'Press any key to continue...'", 0dh, 0ah
				;          BYTE "to view the next page. ", 0
 00000A6E 2A 2A 45 43 3A	ec_3      BYTE "**EC: Make the program more efficient by checking against only prime divisors, ", 0dh, 0ah
	   20 4D 61 6B 65
	   20 74 68 65 20
	   70 72 6F 67 72
	   61 6D 20 6D 6F
	   72 65 20 65 66
	   66 69 63 69 65
	   6E 74 20 62 79
	   20 63 68 65 63
	   6B 69 6E 67 20
	   61 67 61 69 6E
	   73 74 20 6F 6E
	   6C 79 20 70 72
	   69 6D 65 20 64
	   69 76 69 73 6F
	   72 73 2C 20 0D
	   0A
 00000ABF  77 68 69 63 68	          BYTE "which requires saving all of the primes found so far (numbers that fail ", 0dh, 0ah
	   20 72 65 71 75
	   69 72 65 73 20
	   73 61 76 69 6E
	   67 20 61 6C 6C
	   20 6F 66 20 74
	   68 65 20 70 72
	   69 6D 65 73 20
	   66 6F 75 6E 64
	   20 73 6F 20 66
	   61 72 20 28 6E
	   75 6D 62 65 72
	   73 20 74 68 61
	   74 20 66 61 69
	   6C 20 0D 0A
 00000B09  74 68 65 20 63	          BYTE "the composite test).", 0
	   6F 6D 70 6F 73
	   69 74 65 20 74
	   65 73 74 29 2E
	   00
 00000B1E 4E 6F 74 65 3A	Note      BYTE "Note: For EC 3, I first implemented the Sieves of Eratosthenes algorithm to ", 0dh, 0ah
	   20 46 6F 72 20
	   45 43 20 33 2C
	   20 49 20 66 69
	   72 73 74 20 69
	   6D 70 6C 65 6D
	   65 6E 74 65 64
	   20 74 68 65 20
	   53 69 65 76 65
	   73 20 6F 66 20
	   45 72 61 74 6F
	   73 74 68 65 6E
	   65 73 20 61 6C
	   67 6F 72 69 74
	   68 6D 20 74 6F
	   20 0D 0A
 00000B6C  63 61 6C 63 75	          BYTE "calculate all prime numbers and saved the numbers in an array. Then I checked ", 0dh, 0ah
	   6C 61 74 65 20
	   61 6C 6C 20 70
	   72 69 6D 65 20
	   6E 75 6D 62 65
	   72 73 20 61 6E
	   64 20 73 61 76
	   65 64 20 74 68
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 6E 20 61 6E
	   20 61 72 72 61
	   79 2E 20 54 68
	   65 6E 20 49 20
	   63 68 65 63 6B
	   65 64 20 0D 0A
 00000BBC  69 6E 74 65 67	          BYTE "integers against the prime array to determine if it was composite.", 0
	   65 72 73 20 61
	   67 61 69 6E 73
	   74 20 74 68 65
	   20 70 72 69 6D
	   65 20 61 72 72
	   61 79 20 74 6F
	   20 64 65 74 65
	   72 6D 69 6E 65
	   20 69 66 20 69
	   74 20 77 61 73
	   20 63 6F 6D 70
	   6F 73 69 74 65
	   2E 00

				; Note to self: It would have been easier to have the listInts array save the composite numbers rather than 
				; the primes so the ShowComposites function would only need to print the number of composites the user 
				; requested rather than comparing them to the prime numbers, but it was implemented this way to fulfill EC3. 
				; Or perhaps have a single array with consecutive itegers and each integer contains a boolean value if it's prime
				; or composite? Either way, it was neat to see how the Sieves algorithm was implemented. 
				; Reference: https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes 

 00000000			.code
 00000000			main PROC
 00000000  E8 00000025		     call intro
 00000005  E8 00000044		     call printEc
 0000000A  E8 00000072		     call getData
				          ; call validate
 0000000F  E8 000000B1		     call fillArray      ; fills an array with consecutive integers 2 - n
				     ;call printArray    ; check that the array filled correctly
 00000014  E8 000000E6		     call calcPrimes     ; takes an array of consecutive ints and determines which are prime
				     ;call printArray    ; check that Primes were calculated correctly
 00000019  E8 00000128		     call showComposites
				          ; call isComposite
 0000001E  E8 00000167		     call partingMsg

				     exit                ; exit to operating system
 00000023  6A 00	   *	    push   +000000000h
 00000025  E8 00000000 E   *	    call   ExitProcess
 0000002A			main ENDP

				; *****Procedure to introduce the program, author, and intro*****
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: edx
 0000002A			intro     PROC

				; Introduce the program name/author
 0000002A  BA 00000000 R	     mov  edx, OFFSET intro_program
 0000002F  E8 00000000 E	     call WriteString
 00000034  E8 00000000 E	     call CrLf
				; Display introduction
 00000039  BA 00000029 R	     mov  edx, OFFSET display_intro
 0000003E  E8 00000000 E	     call WriteString
 00000043  E8 00000000 E	     call CrLf
 00000048  E8 00000000 E	     call CrLf

 0000004D  C3			     ret
 0000004E			intro     ENDP

				; *****Procedure to print the EC statements*****
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed; edx
 0000004E			printEc   PROC

				;Print EC statements
 0000004E  BA 00000A4E R	     mov edx, OFFSET ec_1
 00000053  E8 00000000 E	     call WriteString
 00000058  E8 00000000 E	     call CrLf
 0000005D  BA 00000A6E R	     mov edx, OFFSET ec_3
 00000062  E8 00000000 E	     call WriteString
 00000067  E8 00000000 E	     call CrLf
 0000006C  BA 00000B1E R	     mov edx, OFFSET Note
 00000071  E8 00000000 E	     call WriteString
 00000076  E8 00000000 E	     call CrLf
 0000007B  E8 00000000 E	     call CrLf

 00000080  C3			     ret
 00000081			printEc   ENDP

				; *****Procedure to get value num_comp from the user*****
				; receives: none
				; returns: user input values for global variable num_comp
				; preconditions: none
				; registers changed: eax, edx
 00000081			getData     PROC

				; Get user number
 00000081  BA 0000008A R	     mov  edx, OFFSET prompt_num
 00000086  E8 00000000 E	     call WriteString
 0000008B  E8 00000000 E	     call ReadInt
 00000090  A3 000000E6 R	     mov  num_comp, eax
 00000095  E8 00000001		     call validate

 0000009A  C3			     ret
 0000009B			getData   ENDP

				; *****Procedure to validate value in num_comp*****
				; receives: num_comp is a global variable, UPPER_LIMIT and LOWER_LIMIT are constants
				; returns: none
				; preconditions: num_comp is initialized
				; registers changed: edx
 0000009B			validate  PROC

				; Validate user input- lower limit (1)
 0000009B  83 3D 000000E6 R	     cmp  num_comp, LOWER_LIMIT   ; if < 1 display error, ask again
	   01
 000000A2  7C 0D		     jl   error

				; Validate user input- upper limit (400)
 000000A4  81 3D 000000E6 R	     cmp  num_comp, UPPER_LIMIT   ; if > 400 keep asking for integers
	   00000190
 000000AE  77 01		     ja   error
				     ;jmp calculate
 000000B0  C3			     ret

				; Display error message if needed (out of range)
 000000B1			error:
 000000B1  BA 000000C2 R	     mov  edx, OFFSET prompt_error
 000000B6  E8 00000000 E	     call WriteString
 000000BB  E8 00000000 E	     call CrLf
 000000C0  E8 FFFFFFBC		     call  getData
				   
				     ;ret
 000000C5			validate  ENDP

				; *****Procedure to fill array with integers*****
				; receives: listInts is a global variable
				; returns: global variable listInts initialized with consecutive integers 2-n
				; preconditions: none
				; registers changed: edi, ecx, eax
 000000C5			fillArray  PROC
				     ;xor ecx, ecx        ; zero the counter
 000000C5  BF 000000EA R	     mov edi, OFFSET listInts      ; edi = address of listInts
 000000CA  B9 00000258		     mov ecx, LENGTHOF listInts    ; initialize loop counter
 000000CF  B8 00000002		     mov eax, 2                    ; Sieve of Eratothenes is from 2 to n

 000000D4			fillLoop:
 000000D4  89 07		     mov [edi], eax                ; move the integer into the array address   
 000000D6  40			     inc eax                       ; increment the integer
 000000D7  83 C7 04		     add edi, TYPE listInts        ; point to next element
 000000DA  E2 F8		     loop fillLoop                 ; repeat until ecx = 0

 000000DC  C3			     ret
 000000DD			fillArray ENDP

				; *****Procedure to print array*****
				; receives: listInts is a global variable
				; returns: none
				; preconditions: listInts has been intialized with consecutive integers 2-n
				; registers changed: esi, eax, ecx, al
 000000DD			printArray  PROC
 000000DD  BE 000000EA R	     mov esi, OFFSET listInts
 000000E2  33 C9		     xor ecx, ecx                  ; zero the counter
				     
 000000E4			printLoop:
 000000E4  33 C0		     xor eax, eax                  ; zero eax
 000000E6  8B 04 8E		     mov eax, [esi + 4 * ecx]      ; esi= pointer to the array, 4= element size, ecx= element index 
 000000E9  E8 00000000 E	     call WriteDec
 000000EE  B0 09		     mov al, 9
 000000F0  E8 00000000 E	     call WriteChar
				     ;call CrLf
 000000F5  41			     inc ecx                       ; increment counter
 000000F6  81 F9 00000258	     cmp ecx, LENGTHOF listInts    ; are we at end of array?
 000000FC  75 E6		     jne   printLoop
				     ;call CrLf
				     
 000000FE  C3			     ret
 000000FF			printArray ENDP

				; *****Procedure to check for prime numbers*****
				; receives: listInts is a global variable
				; returns: listInts containing only prime numbers (0's for composites)
				; preconditions: listInts initialized to consecutive integers 2-n
				; registers changed: ecx, ebx
 000000FF			calcPrimes  PROC
 000000FF  33 C9		     xor ecx, ecx                  ; zero the counter
 00000101			outerLoop:
 00000101  8B D9		     mov ebx, ecx                  ; move counter value into ebx (we will use ebx as innerloop counter)
 00000103  83 3C 8D		     cmp [listInts + 4 * ecx], 0   ; is element at array index[counter] == 0 (not prime)?
	   000000EA R 00
 0000010B  75 0A		     jne innerLoop                 ; if it's prime go to innerloop
				     
 0000010D			     keepLooping1:
 0000010D  41			     inc ecx                       ; increment counter
 0000010E  81 F9 00000258	     cmp ecx, LENGTHOF listInts    ; are we at end of array?
 00000114  72 EB		     jb   outerLoop                ; if not, go back to beginning of outerLoop
				     
 00000116  C3			     ret

 00000117			innerLoop:
 00000117  03 1C 8D		     add ebx, [listInts + 4 * ecx]      ; add the value contained at array index to ebx counter
	   000000EA R
 0000011E  C7 04 9D		     mov [listInts + 4 * ebx], 0        ; number is not prime so set to 0
	   000000EA R
	   00000000
 00000129  81 FB 00000258	     cmp ebx, LENGTHOF listInts         ; are we at end of array?
 0000012F  72 E6		     jb innerLoop 
 00000131  EB DA		     jmp keepLooping1

 00000133  C3			     ret
 00000134			calcPrimes ENDP

				; *****Procedure to determine composite numbers*****
				; receives: listInts and checkComp are global variables
				; returns: the next composite number
				; preconditions: listInts contains only prime numbers (0's for composites)
				; registers changed: eax, esi, ebx
 00000134			isComposite PROC
 00000134			compare:
 00000134  8B 04 9E		     mov eax, [esi + 4 * ebx]      ; esi= pointer to the array, 4= element size, ecx= element index
 00000137  83 F8 00		     cmp eax, 0
 0000013A  75 01		     jnz skipPrime
 0000013C  C3			     ret

 0000013D			skipPrime:
 0000013D  43			     inc ebx
 0000013E  81 FB 00000258	     cmp ebx, LENGTHOF listInts    ; are we at the end of the array?
 00000144  72 EE		     jb compare

 00000146			isComposite ENDP

				; *****Procedure to display composite numbers*****
				; receives: listInts and num_comp are global variables
				; returns: none
				; preconditions: listInts contains prime numbers, num_comp initialized
				; registers changed: eax, ebx, ecx, edx, esi, al, 
 00000146			showComposites  PROC
 00000146  BE 000000EA R	     mov esi, OFFSET listInts
 0000014B  33 C9		     xor ecx, ecx        ; zero ecx and ebx registers
 0000014D  33 DB		     xor ebx, ebx
 0000014F			printComp:
 0000014F  E8 FFFFFFE0		     call isComposite
 00000154  8B C3		     mov eax, ebx
 00000156  83 C0 02		     add eax, 2          ; the value at array index (ebx) is ebx + 2
 00000159  E8 00000000 E	     call WriteDec
 0000015E  B0 09		     mov al, 9           ; tab over
 00000160  E8 00000000 E	     call WriteChar
				     
 00000165  53			     push ebx            ; save ebx
 00000166  50			     push eax            ; save eax

 00000167			     formatting:         ; 10 numbers per line
 00000167  41			     inc ecx             ; need to increment because 0/10 = 0
 00000168  8B C1		     mov eax, ecx
 0000016A  99			     cdq
 0000016B  BB 0000000A		     mov ebx, 10
 00000170  F7 F3		     div ebx
 00000172  83 FA 00		     cmp edx, 0
 00000175  75 05		     jne noNewline
 00000177  E8 00000000 E	     call CrLf
 0000017C			     noNewline:

 0000017C  49			     dec ecx             ; decrement back to original
 0000017D  58			     pop eax             ; call back the saved eax
 0000017E  5B			     pop ebx             ; call back the saved ebx
 0000017F  43			     inc ebx             ; increment counter (array index)
 00000180  41			     inc ecx             ; increment counter (to num_comp)
 00000181  3B 0D 000000E6 R	     cmp ecx, num_comp   ; are we at num of comps?
 00000187  7C C6		     jl   printComp

 00000189  C3			     ret
 0000018A			showComposites ENDP

				; *****Procedure to display parting message*****
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: edx
 0000018A			partingMsg     PROC
 0000018A  E8 00000000 E	     call CrLf
 0000018F  BA 000000DC R	     mov  edx, OFFSET goodbye
 00000194  E8 00000000 E	     call WriteString
 00000199  E8 00000000 E	     call CrLf

 0000019E  C3			     ret
 0000019F			partingMsg     ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/04/16 23:38:54
+Composite Numbers     (Project4_Arnold.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000BFF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000019F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
calcPrimes . . . . . . . . . . .	P Near	 000000FF _TEXT	Length= 00000035 Public STDCALL
  outerLoop  . . . . . . . . . .	L Near	 00000101 _TEXT	
  keepLooping1 . . . . . . . . .	L Near	 0000010D _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 00000117 _TEXT	
fillArray  . . . . . . . . . . .	P Near	 000000C5 _TEXT	Length= 00000018 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000D4 _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000081 _TEXT	Length= 0000001A Public STDCALL
intro  . . . . . . . . . . . . .	P Near	 0000002A _TEXT	Length= 00000024 Public STDCALL
isComposite  . . . . . . . . . .	P Near	 00000134 _TEXT	Length= 00000012 Public STDCALL
  compare  . . . . . . . . . . .	L Near	 00000134 _TEXT	
  skipPrime  . . . . . . . . . .	L Near	 0000013D _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002A Public STDCALL
partingMsg . . . . . . . . . . .	P Near	 0000018A _TEXT	Length= 00000015 Public STDCALL
printArray . . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 00000022 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 000000E4 _TEXT	
printEc  . . . . . . . . . . . .	P Near	 0000004E _TEXT	Length= 00000033 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
showComposites . . . . . . . . .	P Near	 00000146 _TEXT	Length= 00000044 Public STDCALL
  printComp  . . . . . . . . . .	L Near	 0000014F _TEXT	
  formatting . . . . . . . . . .	L Near	 00000167 _TEXT	
  noNewline  . . . . . . . . . .	L Near	 0000017C _TEXT	
validate . . . . . . . . . . . .	P Near	 0000009B _TEXT	Length= 0000002A Public STDCALL
  error  . . . . . . . . . . . .	L Near	 000000B1 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LOWER_LIMIT  . . . . . . . . . .	Number	 00000001h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
Note . . . . . . . . . . . . . .	Byte	 00000B1E _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 00000190h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
checkComp  . . . . . . . . . . .	DWord	 00000A4A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_intro  . . . . . . . . .	Byte	 00000029 _DATA	
ec_1 . . . . . . . . . . . . . .	Byte	 00000A4E _DATA	
ec_3 . . . . . . . . . . . . . .	Byte	 00000A6E _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 000000DC _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_program  . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listInts . . . . . . . . . . . .	DWord	 000000EA _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
num_comp . . . . . . . . . . . .	DWord	 000000E6 _DATA	
prompt_error . . . . . . . . . .	Byte	 000000C2 _DATA	
prompt_num . . . . . . . . . . .	Byte	 0000008A _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
