Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/20/16 20:30:50
0Sorting Random Integers    (Project5_Arnold.asm	     Page 1 - 1


				TITLE Sorting Random Integers    (Project5_Arnold.asm)

				; Author: Keisha Arnold
				; Email: arnoldke@oregonstate.edu
				; Course / Project ID: CS 271-400 / Sorting Random Integers       Due Date: November 20, 2016
				; Description: This program generates random numbers in the range [100 ... 999],
				;    displays the original list, sorts the list, and calculates the median value.
				;    Finally, it displays the list sorted in descending order. 
				 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert constant definitions here)
				; term range
 = 0000000A			MIN = 10            ;number of random integers
 = 000000C8			MAX = 200
 = 00000064			LO = 100            ;range of random numbers
 = 000003E7			HI = 999

 00000000			.data
				; string variables
 00000000 53 6F 72 74 69	intro_program  BYTE "Sorting Random Integers       by Keisha Arnold", 0
	   6E 67 20 52 61
	   6E 64 6F 6D 20
	   49 6E 74 65 67
	   65 72 73 20 20
	   20 20 20 20 20
	   62 79 20 4B 65
	   69 73 68 61 20
	   41 72 6E 6F 6C
	   64 00
 0000002F 54 68 69 73 20	display_intro  BYTE "This program generates random numbers in the range [100 ...999], ", 0dh, 0ah
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 20 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 5B 31 30 30
	   20 2E 2E 2E 39
	   39 39 5D 2C 20
	   0D 0A
 00000072  64 69 73 70 6C	               BYTE "displays the original list, sorts the list, and calculates the ", 0dh, 0ah
	   61 79 73 20 74
	   68 65 20 6F 72
	   69 67 69 6E 61
	   6C 20 6C 69 73
	   74 2C 20 73 6F
	   72 74 73 20 74
	   68 65 20 6C 69
	   73 74 2C 20 61
	   6E 64 20 63 61
	   6C 63 75 6C 61
	   74 65 73 20 74
	   68 65 20 0D 0A
 000000B3  6D 65 64 69 61	               BYTE "median value. Finally, it displays the list sorted in descending order.", 0
	   6E 20 76 61 6C
	   75 65 2E 20 46
	   69 6E 61 6C 6C
	   79 2C 20 69 74
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 64
	   65 73 63 65 6E
	   64 69 6E 67 20
	   6F 72 64 65 72
	   2E 00
 000000FB 48 6F 77 20 6D	prompt_num     BYTE "How many numbers should be generated? [10 ... 200]: ", 0
	   61 6E 79 20 6E
	   75 6D 62 65 72
	   73 20 73 68 6F
	   75 6C 64 20 62
	   65 20 67 65 6E
	   65 72 61 74 65
	   64 3F 20 5B 31
	   30 20 2E 2E 2E
	   20 32 30 30 5D
	   3A 20 00
 00000130 49 6E 76 61 6C	prompt_error   BYTE "Invalid input. ", 0
	   69 64 20 69 6E
	   70 75 74 2E 20
	   00
 00000140 54 68 65 20 75	display_uns    BYTE "The unsorted random numbers: ", 0
	   6E 73 6F 72 74
	   65 64 20 72 61
	   6E 64 6F 6D 20
	   6E 75 6D 62 65
	   72 73 3A 20 00
 0000015E 54 68 65 20 73	display_sort   BYTE "The sorted list: ", 0
	   6F 72 74 65 64
	   20 6C 69 73 74
	   3A 20 00
 00000170 54 68 65 20 6D	display_med    BYTE "The median is ", 0
	   65 64 69 61 6E
	   20 69 73 20 00
 0000017F 47 6F 6F 64 62	goodbye        BYTE "Goodbye! ", 0
	   79 65 21 20 00

				; integer variables
 00000189 00000000		request        DWORD      ?             ; number of random integers requested by user
 0000018D  000000C8 [		array          DWORD      MAX DUP(?)    ; array of integers
	    00000000
	   ]
				    
				; EC Options
				;ec_1      BYTE "**EC: Display the numbers ordered by column instead of by row.", 0
				;ec_2      BYTE "**EC: Use a recursive sorting algorithm (e.g. Merge Sort, Quick Sort, Heap Sort, etc.)", 0
				;ec_3      BYTE "**EC: Implement the program using floating-point numbers and the floating-point processor.", 0
				;ec_4      BYTE "**EC: Generate the numbers into a file, then read the file into the array."

 00000000			.code
 00000000			main PROC
 00000000  E8 00000000 E	     call Randomize           ;seed the random integer generator

 00000005  E8 0000007A		     call intro               ;intro and programmer's name

				     ;call printEc

 0000000A  68 00000189 R	     push OFFSET request
 0000000F  E8 00000099		     call getData             ;get the user's number and validate it

				     
 00000014  68 0000018D R	     push OFFSET array
 00000019  FF 35 00000189 R	     push request
 0000001F  E8 000000C8		     call fillArray           ;fills an array with random integers [100 ... 999]

 00000024  68 0000018D R	     push OFFSET array
 00000029  FF 35 00000189 R	     push request
 0000002F  68 00000140 R	     push OFFSET display_uns
 00000034  E8 000000E0		     call printArray          ;prints unsorted list     

 00000039  68 0000018D R	     push OFFSET array
 0000003E  FF 35 00000189 R	     push request   
 00000044  E8 00000119		     call sortList            ;sorts the array in descending order

 00000049  68 0000018D R	     push OFFSET array
 0000004E  FF 35 00000189 R	     push request   
 00000054  68 00000170 R	     push OFFSET display_med
 00000059  E8 00000153		     call median              ;finds and displays the median value

 0000005E  68 0000018D R	     push OFFSET array
 00000063  FF 35 00000189 R	     push request
 00000069  68 0000015E R	     push OFFSET display_sort
 0000006E  E8 000000A6		     call printArray          ;prints sorted list
				     
 00000073  68 0000017F R	     push OFFSET goodbye      ;displays parting message
 00000078  E8 0000018B		     call partingMsg

				     exit                     ; exit to operating system
 0000007D  6A 00	   *	    push   +000000000h
 0000007F  E8 00000000 E   *	    call   ExitProcess
 00000084			main ENDP

				; ****************************************************************
				; Procedure to introduce the program, author, and introduction
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				; ****************************************************************
 00000084			intro     PROC
				; Introduce the program name/author
 00000084  55			     push ebp
 00000085  8B EC		     mov  ebp, esp
 00000087  BA 00000000 R	     mov  edx, OFFSET intro_program
 0000008C  E8 00000000 E	     call WriteString
 00000091  E8 00000000 E	     call CrLf
				     
				; Display introduction
 00000096  BA 0000002F R	     mov  edx, OFFSET display_intro
 0000009B  E8 00000000 E	     call WriteString
 000000A0  E8 00000000 E	     call CrLf
 000000A5  E8 00000000 E	     call CrLf
				    
 000000AA  5D			     pop ebp
 000000AB  C3			     ret
 000000AC			intro     ENDP

				; ***************************************************************
				; Procedure to print the EC statements
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed; edx
				; ***************************************************************
 000000AC			printEc   PROC
				;Print EC statements
				     ;mov edx, OFFSET ec_1
				     ;call WriteString
				     ;call CrLf
				     ;mov edx, OFFSET ec_3
				     ;call WriteString
				     ;call CrLf
				     ;mov edx, OFFSET Note
				     ;call WriteString
				     ;call CrLf
				     ;call CrLf

 000000AC  C3			     ret
 000000AD			printEc   ENDP

				; **************************************************************
				; Procedure to get user's input.
				; receives: address of request on system stack
				; returns: user input in global request
				; preconditions: none
				; registers changed: eax, ebx, edx
				; **************************************************************
 000000AD			getData     PROC
 000000AD  55			     push ebp
 000000AE  8B EC		     mov  ebp, esp
 000000B0			getNum:
 000000B0  BA 000000FB R	     mov  edx, OFFSET prompt_num   
 000000B5  E8 00000000 E	     call WriteString              ;prompt user
 000000BA  E8 00000000 E	     call ReadInt                  ;get user's number
 000000BF			validate:
 000000BF  83 F8 0A		     cmp  eax, MIN                 ;compare < 10
 000000C2  7C 09		     jl   error
 000000C4  3D 000000C8		     cmp  eax, MAX                 ;compare > 200
 000000C9  7F 02		     jg   error
 000000CB  EB 11		     jmp  valid
 000000CD			error:
 000000CD  BA 00000130 R	     mov  edx, OFFSET prompt_error
 000000D2  E8 00000000 E	     call WriteString
 000000D7  E8 00000000 E	     call CrLf
 000000DC  EB D2		     jmp  getNum
 000000DE			valid:          
 000000DE  8B 5D 08		     mov  ebx, [ebp + 8]           ;address of request in ebx
 000000E1  89 03		     mov  [ebx], eax               ;store in global variable
 000000E3  E8 00000000 E	     call CrLf
				     
 000000E8  5D			     pop  ebp
 000000E9  C2 0004		     ret  4
 000000EC			getData   ENDP

				; ****************************************************************
				; Procedure to fill array with random integers
				; receives: address of the array and value of request on the
				;    system stack.
				; returns: first request elements of array contain random
				;    integers [100 ... 999].
				; preconditions: request is initialized, 10 <= request <= 200
				; registers changed: eax, ebx, ecx, edi
				; *****************************************************************
 000000EC			fillArray  PROC
 000000EC  55			     push ebp
 000000ED  8B EC		     mov  ebp, esp
 000000EF  8B 4D 08		     mov  ecx, [ebp + 8]      ;request in ecx (as counter)
 000000F2  8B 7D 0C		     mov  edi, [ebp + 12]     ;address of array in edi

 000000F5  BB 00000000		     mov  ebx, 0
 000000FA			fillLoop:
				;calculate random integer
 000000FA  8B C3		     mov  eax, ebx            ;get random integer and store in consecutive array elements
 000000FC  B8 000003E7		     mov  eax, HI             ;999
 00000101  83 E8 64		     sub  eax, LO             ;999 - 100 = 899
 00000104  40			     inc  eax                 ;900
 00000105  E8 00000000 E	     call RandomRange         ;result in eax is [0 ... 899]
 0000010A  83 C0 64		     add  eax, LO             ;result in eax is [100 ... 999]
				;store in array
 0000010D  89 07		     mov  [edi], eax
 0000010F  83 C7 04		     add  edi, TYPE array
 00000112  43			     inc  ebx
 00000113  E2 E5		     loop fillLoop

 00000115  5D			     pop  ebp
 00000116  C2 0008		     ret  8
 00000119			fillArray ENDP

				; ******************************************************************
				; Procedure to display array
				; receives: address of array, value of request, and address of title
				;    (display_uns or display_sort) on system stack
				; returns: first request elements of array contain integers 
				;    (sorted or unsorted)
				; preconditions: request is intialized, 10 <= request <= 200
				;    and the first request elements of array initialized
				; registers changed: eax, ebx, edx, esi
				; ******************************************************************
 00000119			printArray  PROC
 00000119  55			     push ebp
 0000011A  8B EC		     mov  ebp, esp
 0000011C  8B 55 08		     mov  edx, [ebp + 8]           ;title in edx
 0000011F  E8 00000000 E	     call WriteString
 00000124  E8 00000000 E	     call CrLf
 00000129  8B 4D 0C		     mov  ecx, [ebp + 12]          ;request in ecx (as loop counter)
 0000012C  8B 75 10		     mov  esi, [ebp + 16]          ;address of array in esi
 0000012F  BB 00000000		     mov  ebx, 0                   ;edx is element counter
 00000134			printLoop:
 00000134  43			     inc  ebx
 00000135  8B 06		     mov  eax, [esi]               ;get current element
 00000137  E8 00000000 E	     call WriteDec
 0000013C  83 C6 04		     add  esi, 4                   ;move to next element
 0000013F  83 FB 0A		     cmp  ebx, 10                  ;10 elements per line
 00000142  75 0C		     jne  noNewline
 00000144  E8 00000000 E	     call CrLf
 00000149  BB 00000000		     mov  ebx, 0
 0000014E  EB 07		     jmp  done

 00000150			noNewline:
 00000150  B0 09		     mov  al, 9                    ;put a tab between numbers
 00000152  E8 00000000 E	     call WriteChar
 00000157			done:
 00000157  E2 DB		     loop printLoop
 00000159  E8 00000000 E	     call CrLf

 0000015E  5D			     pop  ebp     
 0000015F  C2 000C		     ret  12
 00000162			printArray ENDP

				; *****************************************************************
				; Procedure to sort values in the array in descending order
				; receives: address of array and value of request on system stack.
				; returns: first request elements of array are sorted
				; preconditions: request is intialized, 10 <= request <= 200
				;    and the first request elements of array initialized
				; registers changed: eax, ebx, edx, esi
				; *****************************************************************
 00000162			sortList  PROC
 00000162  55			     push ebp                      ;set up stack
				     ;pushad
 00000163  8B EC		     mov  ebp, esp
 00000165  8B 4D 08		     mov  ecx, [ebp + 8]           ;request in ecx (as loop counter)
 00000168  8B 7D 0C		     mov  edi, [ebp + 12]          ;address of array in edi
 0000016B  49			     dec  ecx                      ;request-1
 0000016C  BB 00000000		     mov  ebx, 0
 00000171			outerLoop:
 00000171  8B C3		     mov  eax, ebx                 ;i=k
 00000173  8B D0		     mov  edx, eax                 ;set up inner loop
 00000175  42			     inc  edx                      ;j = k + 1
 00000176  51			     push ecx                      ;preserve outer loop counter
 00000177  8B 4D 08		     mov  ecx, [ebp + 8]           ;original value of request in ecx    
 0000017A			innerLoop:
 0000017A  8B 34 97		     mov  esi, [edi + edx * 4]     ;point to first element
 0000017D  3B 34 87		     cmp  esi, [edi + eax * 4]     ;compare first element to the next element
 00000180  7E 02		     jle  lessThan                  
 00000182  8B C2		     mov  eax, edx
 00000184			lessThan:                          ;skip if greater (don't need to swap elements)
 00000184  42			     inc  edx
 00000185  E2 F3		     loop innerLoop
				;greaterThan:
 00000187  8D 34 9F		     lea  esi, [edi + ebx * 4]     ;assign address of current element to esi
 0000018A  56			     push esi
 0000018B  8D 34 87		     lea  esi, [edi + eax * 4]     ;assign address of current element to esi
 0000018E  56			     push esi
 0000018F  E8 00000008		     call exchange

 00000194  59			     pop  ecx
 00000195  43			     inc  ebx
 00000196  E2 D9		     loop outerLoop
				     
 00000198  5D			     pop  ebp
				     ;popad
 00000199  C2 0008		     ret  8
 0000019C			sortList ENDP

				; ********************************************************************
				; Procedure to swap two elements 
				; receives: address of array[i] and address of array[j] on the stack.
				; returns: values in array[i] and array[j] are swapped
				; preconditions: elements of array initialized
				; registers changed: esi, eax, ebx
				; ********************************************************************
 0000019C			exchange  PROC
 0000019C  60			     pushad
				     ;push ebp
 0000019D  8B EC		     mov  ebp, esp
 0000019F  8B 45 28		     mov  eax, [ebp + 40]
 000001A2  8B 08		     mov  ecx, [eax]
 000001A4  8B 5D 24		     mov  ebx, [ebp + 36]
 000001A7  8B 13		     mov  edx, [ebx]
				     ;xchg ecx, edx
 000001A9  89 10		     mov  [eax], edx
 000001AB  89 0B		     mov  [ebx], ecx
				     
				     ;pop ebp
 000001AD  61			     popad
 000001AE  C2 0008		     ret 8
 000001B1			exchange ENDP

				; ****************************************************************
				; Procedure to find and display the median value
				; receives: address of array, value of request and address of the
				     title ("The median is ") on system stack.
				; returns: the median value of the array
				; preconditions: request is intialized, 10 <= request <= 200
				;    and the first request elements of array is sorted
				; registers changed: eax, ebx, edx, esi
				; ****************************************************************
 000001B1			median  PROC
 000001B1  55			     push ebp
 000001B2  8B EC		     mov  ebp, esp
 000001B4  8B 55 08		     mov  edx, [ebp + 8]           ;title in edx
 000001B7  E8 00000000 E	     call WriteString              ;print title
 000001BC  8B 45 0C		     mov  eax, [ebp + 12]          ;request in eax 
 000001BF  8B 75 10		     mov  esi, [ebp + 16]          ;address of array in edi
 000001C2			findMedian:
 000001C2  99			     cdq  
 000001C3  BB 00000002		     mov  ebx, 2
 000001C8  F7 F3		     div  ebx                      ;divide request by 2
 000001CA  83 FA 00		     cmp  edx, 0                   ;quotient in eax, rem in edx
 000001CD  8B C8		     mov  ecx, eax                 ;move quotient into ecx
 000001CF  74 14		     je   isEven
				;isOdd:
 000001D1  8B 04 8E		     mov  eax, [esi + 4 * ecx]      ;esi= pointer to the array, 4= element size, ecx= element index        
 000001D4  E8 00000000 E	     call WriteDec                  
 000001D9  E8 00000000 E	     call CrLf
 000001DE  E8 00000000 E	     call CrLf
 000001E3  EB 1F		     jmp  done
 000001E5			isEven:
 000001E5  49			     dec ecx                       ;since array is 0 indexed dec 1
 000001E6  8B 04 8E		     mov eax, [esi + 4 * ecx]      ;esi= pointer to the array, 4= element size, ecx= element index 
 000001E9  41			     inc ecx
 000001EA  03 04 8E		     add eax, [esi + 4 * ecx]      ;next element
 000001ED  99			     cdq  
 000001EE  BB 00000002		     mov  ebx, 2
 000001F3  F7 F3		     div  ebx                      ;get average of middle two elements
				     ;add  edx, edx                ;dont need to do this, bc decimal will always be .5
				     ;cmp  edx, ecx
				     ;jle  printAvg
				     ;dec eax
				;printAvg:
 000001F5  E8 00000000 E	     call WriteDec
 000001FA  E8 00000000 E	     call CrLf
 000001FF  E8 00000000 E	     call CrLf
 00000204			done:
 00000204  5D			     pop ebp
 00000205  C2 000C		     ret 12
 00000208			median ENDP

				; ******************************************************************
				; Procedure to display parting message
				; receives: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				; ******************************************************************
 00000208			partingMsg     PROC
 00000208  55			     push ebp
 00000209  8B EC		     mov  ebp, esp
 0000020B  8B 55 08		     mov  edx, [ebp + 8]
 0000020E  E8 00000000 E	     call WriteString
 00000213  E8 00000000 E	     call CrLf
				     
 00000218  5D			     pop ebp
 00000219  C2 0004		     ret  4
 0000021C			partingMsg     ENDP

				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    11/20/16 20:30:50
0Sorting Random Integers    (Project5_Arnold.asm	     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000004AD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000021C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
exchange . . . . . . . . . . . .	P Near	 0000019C _TEXT	Length= 00000015 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000EC _TEXT	Length= 0000002D Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000FA _TEXT	
getData  . . . . . . . . . . . .	P Near	 000000AD _TEXT	Length= 0000003F Public STDCALL
  getNum . . . . . . . . . . . .	L Near	 000000B0 _TEXT	
  validate . . . . . . . . . . .	L Near	 000000BF _TEXT	
  error  . . . . . . . . . . . .	L Near	 000000CD _TEXT	
  valid  . . . . . . . . . . . .	L Near	 000000DE _TEXT	
intro  . . . . . . . . . . . . .	P Near	 00000084 _TEXT	Length= 00000028 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000084 Public STDCALL
median . . . . . . . . . . . . .	P Near	 000001B1 _TEXT	Length= 00000057 Public STDCALL
  findMedian . . . . . . . . . .	L Near	 000001C2 _TEXT	
  isEven . . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000204 _TEXT	
partingMsg . . . . . . . . . . .	P Near	 00000208 _TEXT	Length= 00000014 Public STDCALL
printArray . . . . . . . . . . .	P Near	 00000119 _TEXT	Length= 00000049 Public STDCALL
  printLoop  . . . . . . . . . .	L Near	 00000134 _TEXT	
  noNewline  . . . . . . . . . .	L Near	 00000150 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000157 _TEXT	
printEc  . . . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000001 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000162 _TEXT	Length= 0000003A Public STDCALL
  outerLoop  . . . . . . . . . .	L Near	 00000171 _TEXT	
  innerLoop  . . . . . . . . . .	L Near	 0000017A _TEXT	
  lessThan . . . . . . . . . . .	L Near	 00000184 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 000003E7h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 00000064h   
MAX  . . . . . . . . . . . . . .	Number	 000000C8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN  . . . . . . . . . . . . . .	Number	 0000000Ah   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 0000018D _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
display_intro  . . . . . . . . .	Byte	 0000002F _DATA	
display_med  . . . . . . . . . .	Byte	 00000170 _DATA	
display_sort . . . . . . . . . .	Byte	 0000015E _DATA	
display_uns  . . . . . . . . . .	Byte	 00000140 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 0000017F _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intro_program  . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
prompt_error . . . . . . . . . .	Byte	 00000130 _DATA	
prompt_num . . . . . . . . . . .	Byte	 000000FB _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
request  . . . . . . . . . . . .	DWord	 00000189 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
